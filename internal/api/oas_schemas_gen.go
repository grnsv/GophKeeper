// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/AuthToken
type AuthToken struct {
	// JWT authentication token.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *AuthToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AuthToken) SetToken(val string) {
	s.Token = val
}

func (*AuthToken) loginPostRes()    {}
func (*AuthToken) registerPostRes() {}

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

// LoginPostBadRequest is response for LoginPost operation.
type LoginPostBadRequest struct{}

func (*LoginPostBadRequest) loginPostRes() {}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Record
type Record struct {
	ID   OptUUID    `json:"id"`
	Type RecordType `json:"type"`
	// Base64 encoded encrypted data.
	Data []byte `json:"data"`
	// Base64 encoded nonce used for encryption.
	Nonce []byte `json:"nonce"`
	// Additional information (any valid json).
	Metadata RecordMetadata `json:"metadata"`
	// Data version for synchronization.
	Version int `json:"version"`
}

// GetID returns the value of ID.
func (s *Record) GetID() OptUUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *Record) GetType() RecordType {
	return s.Type
}

// GetData returns the value of Data.
func (s *Record) GetData() []byte {
	return s.Data
}

// GetNonce returns the value of Nonce.
func (s *Record) GetNonce() []byte {
	return s.Nonce
}

// GetMetadata returns the value of Metadata.
func (s *Record) GetMetadata() RecordMetadata {
	return s.Metadata
}

// GetVersion returns the value of Version.
func (s *Record) GetVersion() int {
	return s.Version
}

// SetID sets the value of ID.
func (s *Record) SetID(val OptUUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Record) SetType(val RecordType) {
	s.Type = val
}

// SetData sets the value of Data.
func (s *Record) SetData(val []byte) {
	s.Data = val
}

// SetNonce sets the value of Nonce.
func (s *Record) SetNonce(val []byte) {
	s.Nonce = val
}

// SetMetadata sets the value of Metadata.
func (s *Record) SetMetadata(val RecordMetadata) {
	s.Metadata = val
}

// SetVersion sets the value of Version.
func (s *Record) SetVersion(val int) {
	s.Version = val
}

// Additional information (any valid json).
type RecordMetadata map[string]jx.Raw

func (s *RecordMetadata) init() RecordMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type RecordType string

const (
	RecordTypeCredentials RecordType = "credentials"
	RecordTypeText        RecordType = "text"
	RecordTypeBinary      RecordType = "binary"
	RecordTypeCard        RecordType = "card"
)

// AllValues returns all RecordType values.
func (RecordType) AllValues() []RecordType {
	return []RecordType{
		RecordTypeCredentials,
		RecordTypeText,
		RecordTypeBinary,
		RecordTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordType) MarshalText() ([]byte, error) {
	switch s {
	case RecordTypeCredentials:
		return []byte(s), nil
	case RecordTypeText:
		return []byte(s), nil
	case RecordTypeBinary:
		return []byte(s), nil
	case RecordTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordType) UnmarshalText(data []byte) error {
	switch RecordType(data) {
	case RecordTypeCredentials:
		*s = RecordTypeCredentials
		return nil
	case RecordTypeText:
		*s = RecordTypeText
		return nil
	case RecordTypeBinary:
		*s = RecordTypeBinary
		return nil
	case RecordTypeCard:
		*s = RecordTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RecordWithId
type RecordWithId struct {
	ID   uuid.UUID        `json:"id"`
	Type RecordWithIdType `json:"type"`
	// Base64 encoded encrypted data.
	Data []byte `json:"data"`
	// Base64 encoded nonce used for encryption.
	Nonce []byte `json:"nonce"`
	// Additional information (any valid json).
	Metadata RecordWithIdMetadata `json:"metadata"`
	// Data version for synchronization.
	Version int `json:"version"`
}

// GetID returns the value of ID.
func (s *RecordWithId) GetID() uuid.UUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *RecordWithId) GetType() RecordWithIdType {
	return s.Type
}

// GetData returns the value of Data.
func (s *RecordWithId) GetData() []byte {
	return s.Data
}

// GetNonce returns the value of Nonce.
func (s *RecordWithId) GetNonce() []byte {
	return s.Nonce
}

// GetMetadata returns the value of Metadata.
func (s *RecordWithId) GetMetadata() RecordWithIdMetadata {
	return s.Metadata
}

// GetVersion returns the value of Version.
func (s *RecordWithId) GetVersion() int {
	return s.Version
}

// SetID sets the value of ID.
func (s *RecordWithId) SetID(val uuid.UUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *RecordWithId) SetType(val RecordWithIdType) {
	s.Type = val
}

// SetData sets the value of Data.
func (s *RecordWithId) SetData(val []byte) {
	s.Data = val
}

// SetNonce sets the value of Nonce.
func (s *RecordWithId) SetNonce(val []byte) {
	s.Nonce = val
}

// SetMetadata sets the value of Metadata.
func (s *RecordWithId) SetMetadata(val RecordWithIdMetadata) {
	s.Metadata = val
}

// SetVersion sets the value of Version.
func (s *RecordWithId) SetVersion(val int) {
	s.Version = val
}

func (*RecordWithId) recordsIDGetRes() {}

// Additional information (any valid json).
type RecordWithIdMetadata map[string]jx.Raw

func (s *RecordWithIdMetadata) init() RecordWithIdMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type RecordWithIdType string

const (
	RecordWithIdTypeCredentials RecordWithIdType = "credentials"
	RecordWithIdTypeText        RecordWithIdType = "text"
	RecordWithIdTypeBinary      RecordWithIdType = "binary"
	RecordWithIdTypeCard        RecordWithIdType = "card"
)

// AllValues returns all RecordWithIdType values.
func (RecordWithIdType) AllValues() []RecordWithIdType {
	return []RecordWithIdType{
		RecordWithIdTypeCredentials,
		RecordWithIdTypeText,
		RecordWithIdTypeBinary,
		RecordWithIdTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordWithIdType) MarshalText() ([]byte, error) {
	switch s {
	case RecordWithIdTypeCredentials:
		return []byte(s), nil
	case RecordWithIdTypeText:
		return []byte(s), nil
	case RecordWithIdTypeBinary:
		return []byte(s), nil
	case RecordWithIdTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordWithIdType) UnmarshalText(data []byte) error {
	switch RecordWithIdType(data) {
	case RecordWithIdTypeCredentials:
		*s = RecordWithIdTypeCredentials
		return nil
	case RecordWithIdTypeText:
		*s = RecordWithIdTypeText
		return nil
	case RecordWithIdTypeBinary:
		*s = RecordWithIdTypeBinary
		return nil
	case RecordWithIdTypeCard:
		*s = RecordWithIdTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordsGetOKApplicationJSON []RecordWithId

func (*RecordsGetOKApplicationJSON) recordsGetRes() {}

// RecordsIDDeleteNoContent is response for RecordsIDDelete operation.
type RecordsIDDeleteNoContent struct{}

func (*RecordsIDDeleteNoContent) recordsIDDeleteRes() {}

// RecordsIDGetNotFound is response for RecordsIDGet operation.
type RecordsIDGetNotFound struct{}

func (*RecordsIDGetNotFound) recordsIDGetRes() {}

// RecordsIDPutBadRequest is response for RecordsIDPut operation.
type RecordsIDPutBadRequest struct{}

func (*RecordsIDPutBadRequest) recordsIDPutRes() {}

// RecordsIDPutConflict is response for RecordsIDPut operation.
type RecordsIDPutConflict struct{}

func (*RecordsIDPutConflict) recordsIDPutRes() {}

// RecordsIDPutNoContent is response for RecordsIDPut operation.
type RecordsIDPutNoContent struct{}

func (*RecordsIDPutNoContent) recordsIDPutRes() {}

// RegisterPostBadRequest is response for RegisterPost operation.
type RegisterPostBadRequest struct{}

func (*RegisterPostBadRequest) registerPostRes() {}

// RegisterPostConflict is response for RegisterPost operation.
type RegisterPostConflict struct{}

func (*RegisterPostConflict) registerPostRes() {}

// Ref: #/components/responses/Unauthorized
type Unauthorized struct{}

func (*Unauthorized) loginPostRes()       {}
func (*Unauthorized) recordsGetRes()      {}
func (*Unauthorized) recordsIDDeleteRes() {}
func (*Unauthorized) recordsIDGetRes()    {}
func (*Unauthorized) recordsIDPutRes()    {}

// Ref: #/components/schemas/UserCredentials
type UserCredentials struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// GetLogin returns the value of Login.
func (s *UserCredentials) GetLogin() string {
	return s.Login
}

// GetPassword returns the value of Password.
func (s *UserCredentials) GetPassword() string {
	return s.Password
}

// SetLogin sets the value of Login.
func (s *UserCredentials) SetLogin(val string) {
	s.Login = val
}

// SetPassword sets the value of Password.
func (s *UserCredentials) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/VersionInfo
type VersionInfo struct {
	BuildVersion OptString `json:"build_version"`
	BuildDate    OptDate   `json:"build_date"`
}

// GetBuildVersion returns the value of BuildVersion.
func (s *VersionInfo) GetBuildVersion() OptString {
	return s.BuildVersion
}

// GetBuildDate returns the value of BuildDate.
func (s *VersionInfo) GetBuildDate() OptDate {
	return s.BuildDate
}

// SetBuildVersion sets the value of BuildVersion.
func (s *VersionInfo) SetBuildVersion(val OptString) {
	s.BuildVersion = val
}

// SetBuildDate sets the value of BuildDate.
func (s *VersionInfo) SetBuildDate(val OptDate) {
	s.BuildDate = val
}
